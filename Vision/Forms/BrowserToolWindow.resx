<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        8Lb/1ZH8xHf/ynn/24f/xXfMlVCYajSaeVIAAAAAAAAAAAAAAAAAAAAAAAAAAACHYz92RxHYoVz/zH7+
        v277w3LwvG/Wq2Lwyon/56j63qL85Kr//87+8MD56rn85qz/5qH/5JP/24H/yWv8vF3/ynH/04PapmSX
        bDt8XT4AAAAAAAAAAAAAAAAAAACpjHF8UifAi0z/xXn0sl/8u2b/0oDUoFPcsm3uyor/4KP84KT/977o
        1Jv467P266/55qP94JX/3YX/2Xn/z2v/xWH4uFnpqVT1vXa4h0+Xbkeohm4AAAAAAAAAAAAAAAB0Ty2g
        cT3nrGf+vGvmoUr/w27wtWb/04v/9bbnxYr73KXx05z/9Lv/67Hw4aPy5aH135fy1IX20Hj+0HH/zWn/
        xGHxtFb9v2vjqWHzvYGcbUGEWDkAAAAAAAAAAAAAAACDWS7YpGjgn1XjnUnwqVL+vGnjql//56f/+MHJ
        qHbfwZDu0J/726b01pvz2pr33pj12pDx0IHzzHf5zXT2xWnuuV/aoUzutWbRmlXPm1/bqnqAUSvHm3wA
        AAAAAAChflyecT7epmXgnU7on0n3sFnsqlvos3D0yJL//tD32bDAonnRsYbox5bqxY3915f+1ZD70Yr5
        zoX5zYD1x3nsvG7gr2PCkEjMm1e2hUe1g07Yp3mkdk2fck0AAAAAAACZc0m6iVHJjUfsplPspEznn0vv
        sWXfrG7xyZn//+L//+Ts0K7MrYbJpXf/26b9x4r5v330vXr2wX7yvnzmtHLbrW3arm//3KHyx47KnmnD
        lWWgdEW/kmePYTgAAAAAAAChd0rIlFjFh0DooEzkmkLdl0TytG3RoGjjvZP/9tf/9tz//+f/58TLpXvu
        vYv5t3zyqWvspmrvr3XkqXHSnGfVpnPqv47//9n/+cz/67+xil7YroO3jWKccUYAAAAAAACfcUG8hUjO
        jkfdlELimUfjoVPWnl23jFvGpoP//+3/+uj//+3//+L/4rzjs4P2s3rso2floGfqqXbYoHHEkmjXrIX9
        17T/9dP//+P/5cPHo33/78jrwZaOZDcAAAAAAACdbDyzeT7Dgj3PiTzUkEXfo2HSoGvHpYH/69X///T/
        //f//u7/++L/9NLmv5LzuoLkp2nfpm/VonDWqoHJo4G/noT43MT/+uX//+v//+r82ry5k3DBlm+hdEgA
        AAAAAACjckTKkVnEhkbJh0DurWjvuHvKnm//8NH///H//vb//fb///T//+3//+T/6r76yZHtuX3ltYHY
        roHatpLPspfBqJTn0sP///T///L/6tny07x7VjqkfFmVaUAAAAAAAACNYzmvfUnepmvprGr2uXnos3rs
        wpX83sH//Or///f///j/9+fs2L/kyKXUsYXcrXrktIDpvJDPqoS8nH+3n4nPuqv/9+7/8+z/8+r/9en/
        //DYuaKefF+bdVMAAAAAAACfeljBlGjsuoblrXLxu3/GlGC7lGj/48X/9+X///P/8+fp2MXYwqbcv5rh
        vJDyyJnds4bUrYbfvp3v07v03c366eD///v//vz/9fH///j///X/7dujhnGQclcAAAAAAACfgWaYdFDt
        wpfjsoDQn22/k2T/4bvRtpvLuKPEtKS4qJfCrZfawaHlxZzlwJTxy6Hgu5Xqyaj/+uH///D///X/+vT/
        /Pz//P3//v/77+3p29Xbyb7KtqWKcmAAAAAAAAAAAACIa1CriGbIn3j/3rPzzKXx0a7Cp43FsJvUwrHR
        vqnaw6nu0rDsyZ7rxprZtY/hwJ/938T//+3///L77OP//fn//v779Pf//P/+9vft4d/98OjUxLizoJMA
        AAAAAAAAAACAaljav6X/7c7/78zGpYSvk3XmzLTZxK/o0sDex7HYvaLgwJ3ivZH81an00a/mxqnewKf7
        4s7/9+j///f///v58fH//v/18PH79vX38O3/+PGhlYsAAAAAAAAAAAAAAACej4b45tX//+3//+r33sT6
        4Mj13sjPt6PWvqrfx6/u0LPxz6vju5H30afmw6Llx6zavqboz7vx3M3/9en///jb0s7EvbrQy8rNxsP/
        //vPx8Cck4oAAAAAAAAAAAAAAAAAAACMf3f///P/8uH///D/6tX///Dz28e8pY/JsJbkx6jryKb91q/1
        0Kr00bDnx6rdv6bjyLP23sz04dLUxLisoJa5raf37ebe1s//+fKEe3IAAAAAAAAAAAAAAAAAAAAAAAAA
        AACLf3n///f//O////L//Ov///DkzbfEq5HBo4bWtZT/27nnwqDoxqjuzrHw0rfrz7fq0b334c//8eL/
        ++7///P///X///duZVsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACkm5f98ur/9en///T/++r//+72
        28bnybD/48jw0LP/58r317rz0rjpyrHkxa7pzrn64s7/9OL//ez//+/y5deTin0AAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAACEe3jv5Nz46Nz/8eL/8d///en/8Nvt0bnmyrLdwan/4sv32L/tzrfv
        07v84cz/7dn/7tz66NfbzLx8b2EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABhUkmLem3/8uL/8+H+5tT/7NrErZ3awbH949L638v43cn438vx2cXXwa+wnIqRgXCqnY0AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAa1yGb1+mkYLDraHw3tP8
        6N25opPYv6/iybm4oZF7Z1ZxX06xno8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACij4eLe3WqmpSTgHiTf3Sjj4TKtqsAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD////////////wB///wAD//gAAf/wAAD/4AAAf8AAAD+AAAAfAAAADwAAAA8AAAAGAAAABgAAAAYAA
        AAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAHAAAABwAAAA8AAAAPgAAAH8AAAD/gAAB/8AAA//wAAf//A
        Af//+A///////w==
</value>
  </data>
</root>